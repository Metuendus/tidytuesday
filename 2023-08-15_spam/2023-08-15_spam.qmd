---
title: "2023-08-15_spam"
date: 2023-07-25
author: "Jos√© Carlos Corona"
format:
    html:
      theme: cosmo
      toc: true
      toc-depth: 3
      number-sections: true
      code-tools:
        source: true
        toggle: true
        caption: none
      code-copy: true
      code-fold: true
      code-link: true
      highlight-style: oblivion
      smooth-scroll: true
---
# TidyTuesday
```{r setup, include=FALSE}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  formattable,
  ggtext,
  janitor,
  plotly,
  showtext,
  tidymodels,
  tidyverse,
  tidytuesdayR
)
```

# üíæ load data
```{r}
dat <- tidytuesdayR::tt_load(2023, week = 33)

raw_spam <- dat$spam |> 
  clean_names()
```

# ‚úçÔ∏è fonts and palettes
```{r}
txt <- "white"
bg <- "grey20"
accent <- '#ecbf3d'

pal <- c('#ecbf3d', '#f0cc46', '#f5e355', '#fdf56d', '#fdffbe', '#ffffff')

font_add("fa-brands", regular = "../assets/fonts/fa-brands-400.ttf")
font_add("fa-solid", regular = "../assets/fonts/fa-solid-900.ttf")
font_add_google("Mukta", "mukta")
font_add_google("Rubik Mono One", "rubik")
showtext_auto()

ft <- "mukta"
ft1 <- "rubik"
```

# ü§º wrangle
```{r}
spam <- raw_spam |> 
  mutate(is_spam = as_factor(case_match(
    yesno,
    "y" ~ TRUE,
    "n" ~ FALSE
  )),
  .keep = "unused") |> 
  rename(n_mayusculas = crl_tot,
         pct_dolar = dollar,
         pct_exclamacion = bang,
         pct_dinero = money,
         pct_ceros = n000,
         pct_make = make)

spam_long <- spam |> 
  pivot_longer(cols = n_mayusculas:pct_make,
               names_to = "metric",
               values_to = "value")
```
# üî¨ model
## logisitc Regression
```{r}
# splits <- initial_split(spam,
#                         strata = is_spam,
#                         prop = 3/4)
# train_data <- training(splits)
# test_data <- testing(splits)
# 
# model_lr <- logistic_reg() |> 
#   set_engine('glm') |> 
#   set_mode('classification')
# 
# recipe_lr <- recipe(is_spam ~ ., data = train_data) |> 
#   step_normalize(all_predictors())
# 
# workflow_lr <- workflow() |> 
#   add_model(model_lr) |> 
#   add_recipe(recipe_lr)
# 
# workflow_lr_fit <- workflow_lr |> 
#   last_fit(split = splits)
# 
# workflow_lr_fit |> 
#   collect_metrics()
# 
# workflow_lr_preds <- workflow_lr_fit |> 
#   collect_predictions()

```
## decision tree


# üî° text
```{r}
title <- "¬øQu√© factores tiene un correo spam?"
subtitle <- "An√°lisis de 4601 emails: Clasificaci√≥n de correo basura de acuerdo a ciertas frecuencias de palabras y caracteres"
caption <- "tidytuesday 2023-08-15"
x_axis <- "Valores"
y_axis <- "¬øEs spam?"
```

# üìä plot


```{r}
spam_long |> 
  ggplot(aes(x = is_spam, y = value, fill = metric)) +
  geom_boxplot(color = "grey90") +
  scale_y_log10() +
  coord_flip() +
  facet_grid(~ metric, scales = "free", space="free_x") +
  labs(title = title,
       subtitle = subtitle,
       caption = caption,
       x = x_axis,
       y = y_axis) +
  scale_fill_manual(
    values = c("#06aed5ff","#086788ff","#f0c808ff","#7209B7","#EF767A","#dd1c1aff")
  ) +
  theme_void() +
  theme(
    text = element_text(family = ft, size = 50, lineheight = 0.3, colour = txt),
    plot.background = element_rect(fill = bg, colour = bg),
    plot.title = element_markdown(colour = txt, hjust = 0.05, margin = margin(t = 20), size = 70, face = "bold", family = ft1),
    plot.subtitle = element_markdown(colour = txt, hjust = 0.05, margin = margin(t = 30, b = 50)),
    plot.caption = element_markdown(colour = txt, hjust = 0.5, margin = margin(t = 20)),
    plot.margin = margin(b = 20, t = 10, r = 50, l = 50),
    axis.text = element_text(colour = txt, size = 40),
    axis.text.x = element_blank(),
    legend.position = "none"
  )
ggsave("spam.png", height = 10, width = 20)
```

